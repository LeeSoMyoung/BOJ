
// BOJ 1761 C++ 정점들의 거리

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#define MAX 40100
#define MAX_N 20
#define REP(i,a,b) for(int i=a;i<b;++i)
#define FOR(i,N) REP(i,0,N)
using namespace std;
typedef pair<int, int> pii;

bool visited[MAX];
int dp[MAX][MAX_N];
int depth[MAX];
int dist[MAX];
vector<vector<pii>>adj;
void dfs(int now, int level) {
	visited[now] = true;
	depth[now] = level;
	for (pii next : adj[now]) {
		if (visited[next.first]) continue;
		dist[next.first] = next.second + dist[now];
		dfs(next.first, level + 1);
		dp[next.first][0] = now;
	}
	return;
}
void getParents(int N) {
	REP(i, 1, MAX_N)
		REP(j, 1, N + 1)
		dp[j][i] = dp[dp[j][i - 1]][i - 1];
	return;
}
int LCA(int a, int b) {
	if (depth[a] < depth[b]) swap(a, b);
	int diff = depth[a] - depth[b];
	FOR(i, MAX_N)
		if (diff &(1 << i))
			a = dp[a][i];
	if (a != b) {
		for (int i = MAX_N - 1; i >= 0; --i)
			if (dp[a][i] && dp[a][i] != dp[b][i]) {
				a = dp[a][i];
				b = dp[b][i];
			}
		a = dp[a][0];
	}
	return a;
}
int main(void) {
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	int N, M, u, v, d;
	cin >> N;
	adj.resize(N + 1);
	for (int i = 0; i < N - 1; ++i) {
		cin >> u >> v >> d;
		adj[u].push_back(pii(v, d));
		adj[v].push_back(pii(u, d));
	}
	dfs(1, 1);
	getParents(N);
	cin >> M;
	while (M--) {
		cin >> u >> v;
		cout << dist[u] + dist[v] - 2 * dist[LCA(u, v)] << '\n';
	}
	return 0;
}
