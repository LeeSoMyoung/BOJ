
// BOJ 1948 임계경로 C++

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef pair<int, int> pii;

int max(const int x, const int y) {
	return x > y ? x : y;
}
int main(void) {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int n, m, u, v, cost, start, end, cnt = 0, ans, now, next, nc;
	vector<vector<pii>>g, rev;
	cin >> n >> m;
	g.resize(n + 1), rev.resize(n + 1);
	vector<int>dist(n + 1, 0), in(n + 1, 0), rin(n + 1, 0);
	vector<bool>visited(n + 1, false);
	while (m--) {
		cin >> u >> v >> cost;
		g[u].push_back(pii(v, cost));
		++in[v], ++rin[u];
		rev[v].push_back(pii(u, cost));
	}
	cin >> start >> end;
	queue<int>q;
	q.push(start);
	while (q.size()) {
		now = q.front();
		q.pop();
		for (pii check : g[now]) {
			next = check.first, nc = check.second;
			dist[next] = max(dist[next], dist[now] + nc);
			--in[next];
			if (!in[next]) q.push(next);
		}
	}
	ans = dist[end];
	q.push(end);
	visited[end] = true;
	while (q.size()) {
		now = q.front();
		q.pop();
		for (pii check : rev[now]) {
			next = check.first, nc = check.second;
			if ((dist[now] - dist[next] == nc) && visited[now]) {
				++cnt;
				visited[next] = true;
			}
			--rin[next];
			if (!rin[next]) q.push(next);
		}
	}
	cout << ans << '\n' << cnt << '\n';
	return 0;
}
